{"version":3,"sources":["services/index.js","store/actions/index.js","components/AccountNav.js","components/Header.js","components/DeletePostButton.js","components/Post.js","components/Posts.js","components/Input.js","components/Signin.js","components/Signup.js","components/Text.js","components/AddPost.js","components/Protected.js","components/ReadPost.js","components/Unprotected.js","App.js","serviceWorker.js","store/reducers/posts.js","store/reducers/users.js","store/reducers/errors.js","store/index.js","index.js"],"names":["responseErrorHandler","response","ok","getToken","Promise","resolve","reject","token","window","localStorage","getItem","getAllPosts","fetch","then","res","json","signIn","email","password","history","location","dispatch","method","cache","headers","body","JSON","stringify","data","user","setItem","catch","error","doSignIn","type","from","state","pathname","replace","signUp","name","doSignUp","push","signOut","removeItem","initUserState","getUser","parse","fetchPostById","postId","getPostById","post","addPost","postToSave","Accept","Authorization","deletePost","deletePostAndFetch","posts","AccountNav","memo","useSelector","users","shallowEqual","useDispatch","className","onClick","to","Header","DeletePostButton","onConfirm","useState","confirm","setConfirm","defaultProps","Post","_id","title","content","createdAt","loggedInUser","moment","format","substring","id","Posts","useEffect","map","key","length","Input","label","onInput","value","hasError","onChange","Signin","setEmail","setPassword","errors","useHistory","useLocation","e","target","Signup","setName","rePassword","setRePassword","Text","onUpdate","evt","AddPost","setTitle","text","setText","txt","Date","Protected","children","rest","render","ReadPost","useParams","Unprotected","App","exact","path","Boolean","hostname","match","action","rootReducer","combineReducers","createStore","applyMiddleware","thunk","ReactDOM","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d2e87d00.chunk.js","sourcesContent":["const responseErrorHandler = (response) => {\n  if (!response.ok) {\n    throw response;\n  }\n  return response;\n};\n\nconst getToken = () =>\n  new Promise((resolve, reject) => {\n    try {\n      const getToken = window.localStorage.getItem(\"blogChefJWTToken\");\n      resolve({ token: getToken });\n    } catch {\n      reject();\n    }\n  });\n\nexport const getAllPosts = () =>\n  fetch(\"/api/posts\")\n    .then(responseErrorHandler)\n    .then((res) => res.json());\n\nexport const getPostById = (postId) =>\n  fetch(`/api/post/${postId}`)\n    .then(responseErrorHandler)\n    .then((res) => res.json());\n\nexport const doSignIn = (email, password) =>\n  new Promise((resolve, reject) => {\n    return fetch(\"/api/login\", {\n      method: \"POST\",\n      cache: \"no-cache\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ email, password }),\n    })\n      .then(responseErrorHandler)\n      .then((res) => res.json())\n      .then((data) => {\n        const { token, user } = data;\n        window.localStorage.setItem(\"blogChefJWTToken\", token);\n        window.localStorage.setItem(\"blogChefJWTUser\", JSON.stringify(user));\n        resolve(user);\n      })\n      .catch((error) => {\n        error.json().then(({ error }) => reject(error));\n      });\n  });\n\nexport const doSignUp = (name, email, password) =>\n  new Promise((resolve, reject) => {\n    return fetch(\"/api/signup\", {\n      method: \"POST\",\n      cache: \"no-cache\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ name, email, password }),\n    })\n      .then(responseErrorHandler)\n      .then((res) => res.json())\n      .then((data) => {\n        const { token, user } = data;\n        window.localStorage.setItem(\"blogChefJWTToken\", token);\n        window.localStorage.setItem(\"blogChefJWTUser\", JSON.stringify(user));\n        resolve(user);\n      })\n      .catch((error) => {\n        error.json().then(({ error }) => reject(error));\n      });\n  });\n\nexport const doSignOut = () =>\n  new Promise((resolve, reject) => {\n    try {\n      window.localStorage.removeItem(\"blogChefJWTToken\");\n      window.localStorage.removeItem(\"blogChefJWTUser\");\n      resolve(true);\n    } catch {\n      reject(false);\n    }\n  });\n\nexport const initUser = () =>\n  new Promise((resolve, reject) => {\n    try {\n      const getToken = window.localStorage.getItem(\"blogChefJWTToken\");\n      const getUser = JSON.parse(\n        window.localStorage.getItem(\"blogChefJWTUser\")\n      );\n      if (getToken) {\n        return fetch(\"/api/verify\", {\n          method: \"POST\",\n          cache: \"no-cache\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ token: getToken }),\n        })\n          .then(responseErrorHandler)\n          .then((res) => res.json())\n          .then(() => resolve(getUser))\n          .catch(() => {\n            window.localStorage.removeItem(\"blogChefJWTToken\");\n            window.localStorage.removeItem(\"blogChefJWTUser\");\n            reject(\"User state could not be initialized\");\n          });\n      }\n    } catch {\n      resolve({});\n    }\n  });\n\nexport const addPostAndFetch = (post) =>\n  getToken()\n    .then(({ token }) =>\n      fetch(\"/api/post\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        cache: \"no-cache\",\n        body: JSON.stringify({ post }),\n      })\n    )\n    .then(responseErrorHandler)\n    .then((res) => res.json());\n\nexport const deletePostAndFetch = (postId) =>\n  getToken()\n    .then(({ token }) =>\n      fetch(`/api/post/${postId}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        cache: \"no-cache\",\n      })\n    )\n    .then(responseErrorHandler)\n    .then((res) => res.json())\n    .then(() => getAllPosts());\n","import {\n  doSignIn,\n  doSignOut,\n  initUser,\n  getAllPosts,\n  getPostById,\n  addPostAndFetch,\n  deletePostAndFetch,\n  doSignUp,\n} from \"../../services\";\n\nexport const signIn = (email, password, history, location) => (dispatch) =>\n  doSignIn(email, password)\n    .then((user) => {\n      dispatch({ type: \"SIGNIN_SUCCESS\", user });\n      const { from } = location.state || { from: { pathname: \"/\" } };\n      history.replace(from);\n    })\n    .catch(() => {\n      dispatch({ type: \"SIGNIN_FAILURE\" });\n    });\n\nexport const signUp = (name, email, password, history) => (dispatch) =>\n  doSignUp(name, email, password)\n    .then((user) => {\n      dispatch({ type: \"SIGNUP_SUCCESS\", user });\n      history.push(\"/\");\n    })\n    .catch(() => dispatch({ type: \"SIGNUP_FAILURE\" }));\n\nexport const signOut = () => (dispatch) =>\n  doSignOut()\n    .then(() => dispatch({ type: \"SIGNOUT_SUCCESS\" }))\n    .catch(() => dispatch({ type: \"SIGNOUT_FAILURE\" }));\n\nexport const initUserState = () => (dispatch) =>\n  initUser()\n    .then((user) => dispatch({ type: \"INIT_SUCCESS\", user }))\n    .catch(() => {\n      dispatch({ type: \"INIT_FAILURE\" });\n    });\n\nexport const fetchPosts = () => (dispatch) =>\n  getAllPosts()\n    .then(({ posts }) => {\n      dispatch({ type: \"GET_POSTS_SUCCESS\", posts });\n    })\n    .catch(() =>\n      dispatch({\n        type: \"GET_POSTS_FAILURE\",\n      })\n    );\n\nexport const fetchPostById = (postId) => (dispatch) =>\n  getPostById(postId)\n    .then(({ post }) => {\n      dispatch({\n        type: \"GET_POST_SUCCESS\",\n        post,\n      });\n    })\n    .catch(() =>\n      dispatch({\n        type: \"GET_POST_FAILURE\",\n      })\n    );\n\nexport const addPost = (postToSave, history) => (dispatch) =>\n  addPostAndFetch(postToSave)\n    .then(({ post }) => {\n      dispatch({ type: \"ADD_POST_SUCCESS\", post });\n      history.push(\"/\");\n    })\n    .catch(() => {\n      dispatch({\n        type: \"ADD_POST_FAILURE\",\n      });\n      dispatch(signOut());\n    });\n\nexport const deletePost = (postId) => (dispatch) =>\n  deletePostAndFetch(postId)\n    .then(({ posts }) => dispatch({ type: \"DELETE_POSTS_SUCCESS\", posts }))\n    .catch(() => {\n      dispatch({\n        type: \"DELETE_POST_FAILURE\",\n      });\n      dispatch(signOut());\n    });\n","import React, { memo } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useSelector, useDispatch, shallowEqual } from \"react-redux\";\nimport { signOut } from \"../store/actions\";\n\nconst AccountNav = memo(() => {\n  const { user } = useSelector(state => state.users, shallowEqual);\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"account-nav\">\n      {!user ? (\n        <ul>\n          <Link to=\"/signin\">\n            <li>Signin</li>\n          </Link>\n          <Link to=\"/signup\">\n            <li>Signup</li>\n          </Link>\n        </ul>\n      ) : (\n        <>\n          <h4>{user.name}</h4>\n          <ul>\n            <li onClick={() => dispatch(signOut())}>Signout</li>\n          </ul>\n        </>\n      )}\n    </div>\n  );\n});\n\nexport default AccountNav;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport AccountNav from \"./AccountNav\";\n\nconst Header = () => {\n  return (\n    <div className=\"header\">\n      <div className=\"app-title\">BlogChef</div>\n      <div className=\"app-nav\">\n        <ul>\n          <Link to=\"/\">\n            <li>Home</li>\n          </Link>\n          <Link to=\"/add\">\n            <li>New Post</li>\n          </Link>\n        </ul>\n      </div>\n      <AccountNav />\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst DeletePostButton = ({ onConfirm }) => {\n  const [confirm, setConfirm] = useState(false);\n  return (\n    <div className=\"delete-post-btn\">\n      {!confirm ? (\n        <button className=\"delete-btn\" onClick={() => setConfirm(true)}>\n          Delete?\n        </button>\n      ) : (\n        <>\n          <button className=\"delete-btn-yes\" onClick={onConfirm}>\n            Yes\n          </button>\n          <button className=\"delete-btn-no\" onClick={() => setConfirm(false)}>\n            No\n          </button>\n        </>\n      )}\n    </div>\n  );\n};\n\nDeletePostButton.propTypes = {\n  onConfirm: PropTypes.func\n};\n\nDeletePostButton.defaultProps = {\n  onConfirm: () => {}\n};\n\nexport default DeletePostButton;\n","import React, { memo } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\";\nimport DeletePostButton from \"./DeletePostButton\";\nimport { useSelector, useDispatch, shallowEqual } from \"react-redux\";\n\nimport { deletePost } from \"../store/actions\";\n\nconst Post = memo(({ post }) => {\n  const { _id, title, user, content, createdAt } = post;\n  const { user: loggedInUser } = useSelector(\n    (state) => state.users,\n    shallowEqual\n  );\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"post\">\n      <Link to={`/post/${_id}`}>\n        <h1>{title}</h1>\n      </Link>\n      <h3>\n        by {user.name} | {moment(createdAt).format(\"ddd, MMM Do YY, h:mm a\")}\n      </h3>\n      <p>{content.substring(0, 100)}...</p>\n      {loggedInUser && user._id === loggedInUser.id ? (\n        <DeletePostButton onConfirm={() => dispatch(deletePost(_id))} />\n      ) : null}\n    </div>\n  );\n});\n\nPost.propTypes = {\n  post: PropTypes.object.isRequired,\n};\n\nexport default Post;\n","import React, { memo, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Post from \"./Post\";\nimport { useSelector, useDispatch, shallowEqual } from \"react-redux\";\nimport { fetchPosts } from \"../store/actions\";\n\nconst Posts = memo(({ type }) => {\n  const dispatch = useDispatch();\n  const { posts } = useSelector((state) => state.posts, shallowEqual);\n\n  useEffect(() => {\n    !type && dispatch(fetchPosts());\n  }, [dispatch, type]);\n\n  return (\n    <>\n      <div className=\"content\">\n        {posts && posts.map((post) => <Post post={post} key={post.id} />)}\n        {!posts || (posts.length === 0 && <h2>No posts found :(</h2>)}\n      </div>\n    </>\n  );\n});\n\nPosts.propTypes = {\n  type: PropTypes.string,\n};\n\nexport default Posts;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Input = ({ label, type, onInput, value, hasError }) => {\n  return (\n    <div className={hasError ? \"input-box hasError\" : \"input-box\"}>\n      <span className=\"label\">{label}</span>\n      <input type={type} onChange={onInput} value={value} />\n    </div>\n  );\n};\n\nInput.propTypes = {\n  label: PropTypes.string,\n  type: PropTypes.string,\n  onInput: PropTypes.func,\n  value: PropTypes.string,\n  hasError: PropTypes.bool\n};\n\nInput.defaultProps = {\n  label: \"Default\",\n  type: \"text\",\n  hasError: false\n};\n\nexport default Input;\n","import React, { useState } from \"react\";\nimport { signIn } from \"../store/actions\";\nimport { useDispatch, useSelector, shallowEqual } from \"react-redux\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport Input from \"./Input\";\n\nconst Signin = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const { error } = useSelector(state => state.errors, shallowEqual);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const location = useLocation();\n\n  const onSubmitHandler = () => {\n    if (email && password) {\n      dispatch(signIn(email, password, history, location));\n      setEmail(\"\");\n      setPassword(\"\");\n    }\n  };\n\n  return (\n    <div className=\"sign-in\">\n      <h2>Signin</h2>\n      <div className=\"signin-form\">\n        <Input\n          label=\"E-Mail\"\n          type=\"text\"\n          onInput={e => setEmail(e.target.value)}\n          value={email}\n          hasError={error}\n        />\n\n        <Input\n          label=\"Password\"\n          type=\"password\"\n          onInput={e => setPassword(e.target.value)}\n          value={password}\n          hasError={error}\n        />\n\n        <button onClick={onSubmitHandler}>Go!</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Signin;\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector, shallowEqual } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { signUp } from \"../store/actions\";\nimport Input from \"./Input\";\n\nconst Signup = () => {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [rePassword, setRePassword] = useState(\"\");\n  const { error } = useSelector(state => state.errors, shallowEqual);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const onSubmitHandler = () => {\n    if (name && email && password && password === rePassword) {\n      dispatch(signUp(name, email, password, history));\n    }\n  };\n  return (\n    <div className=\"sign-up\">\n      <h2>Signup</h2>\n      <div className=\"signup-form\">\n        <Input\n          type=\"text\"\n          label=\"Name\"\n          onInput={e => setName(e.target.value)}\n          value={name}\n          hasError={error}\n        />\n\n        <Input\n          type=\"text\"\n          label=\"E-Mail\"\n          onInput={e => setEmail(e.target.value)}\n          value={email}\n          hasError={error}\n        />\n\n        <Input\n          type=\"password\"\n          label=\"Password\"\n          onInput={e => setPassword(e.target.value)}\n          value={password}\n          hasError={error}\n        />\n\n        <Input\n          type=\"password\"\n          label=\"Retype Password\"\n          onInput={e => setRePassword(e.target.value)}\n          value={rePassword}\n          hasError={error}\n        />\n\n        <button onClick={onSubmitHandler}>Done!</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Signup;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Text = ({ label, onUpdate, value, hasError }) => {\n  return (\n    <div className={hasError ? \"text-box hasError\" : \"text-box\"}>\n      <span className=\"label\">{label}</span>\n      <textarea\n        onChange={(evt) =>\n          onUpdate(evt.target.value.replace(/(?:\\r)/g, \"\\n\\n\"))\n        }\n        value={value}\n      />\n    </div>\n  );\n};\n\nText.propTypes = {\n  onUpdate: PropTypes.func,\n  label: PropTypes.string.isRequired,\n  value: PropTypes.string,\n  hasError: PropTypes.bool,\n};\n\nText.defaultProps = {\n  label: \"Text\",\n  hasError: false,\n};\n\nexport default Text;\n","import React, { memo, useState } from \"react\";\nimport { addPost } from \"../store/actions\";\nimport { useSelector, useDispatch, shallowEqual } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport Input from \"./Input\";\nimport Text from \"./Text\";\n\nconst AddPost = memo(() => {\n  const [title, setTitle] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  const { error } = useSelector((state) => state.errors, shallowEqual);\n  const { user } = useSelector((state) => state.users, shallowEqual);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const submitPostHandler = () => {\n    if (title && text !== 0) {\n      const post = {\n        user: user.id,\n        title,\n        content: text,\n        createdAt: new Date(),\n      };\n      dispatch(addPost(post, history));\n    }\n  };\n  return (\n    <div className=\"add-post\">\n      <h2>New Post</h2>\n      <div className=\"add-post-form\">\n        <Input\n          label=\"Title\"\n          onInput={(e) => setTitle(e.target.value)}\n          value={title}\n          hasError={error}\n        />\n        <Text\n          label=\"Type in your thoughts\"\n          onUpdate={(txt) => setText(txt)}\n          value={text}\n          hasError={error}\n        />\n\n        <div className=\"char-count\">{text.length} Characters</div>\n\n        <button id=\"add-post-btn\" onClick={submitPostHandler}>\n          + Add\n        </button>\n      </div>\n    </div>\n  );\n});\n\nexport default AddPost;\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useSelector, shallowEqual } from \"react-redux\";\n\nconst Protected = ({ children, ...rest }) => {\n  const { user } = useSelector(state => state.users, shallowEqual);\n  return (\n    <Route\n      {...rest}\n      render={({ location }) =>\n        user ? (\n          children\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/signin\",\n              state: { from: location }\n            }}\n          />\n        )\n      }\n    />\n  );\n};\n\nexport default Protected;\n","import React, { memo, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector, useDispatch, shallowEqual } from \"react-redux\";\nimport { fetchPostById } from \"../store/actions\";\nimport moment from \"moment\";\n\nconst ReadPost = memo(() => {\n  const { postId } = useParams();\n  const dispatch = useDispatch();\n  const { post } = useSelector((state) => state.posts, shallowEqual);\n\n  useEffect(() => {\n    dispatch(fetchPostById(postId));\n  }, [dispatch, postId]);\n\n  return post.title ? (\n    <div className=\"read-post\">\n      <h1>{post.title}</h1>\n      <h3>\n        by {post.user.name} |{\" \"}\n        {post.createdAt &&\n          moment(post.createdAt).format(\"dddd, MMMM Do YYYY, h:mm a\")}\n      </h3>\n\n      <p>{post.content}</p>\n    </div>\n  ) : null;\n});\n\nexport default ReadPost;\n","import React, { memo } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useSelector, shallowEqual } from \"react-redux\";\n\nconst Unprotected = memo(({ children, ...rest }) => {\n  const { user } = useSelector(state => state.users, shallowEqual);\n  return (\n    <Route\n      {...rest}\n      render={() =>\n        !user ? (\n          children\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/\"\n            }}\n          />\n        )\n      }\n    />\n  );\n});\n\nexport default Unprotected;\n","import React, { useEffect } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Header from \"./components/Header\";\nimport Posts from \"./components/Posts\";\nimport Signin from \"./components/Signin\";\nimport Signup from \"./components/Signup\";\nimport AddPost from \"./components/AddPost\";\nimport Protected from \"./components/Protected\";\nimport ReadPost from \"./components/ReadPost\";\nimport Unprotected from \"./components/Unprotected\";\nimport { useDispatch } from \"react-redux\";\nimport { initUserState } from \"./store/actions\";\n\nconst App = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(initUserState());\n  }, [dispatch]);\n\n  return (\n    <div className=\"app\">\n      <Header />\n      <div className=\"main\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Posts />\n          </Route>\n          <Route type=\"id\" path=\"/post/:postId\">\n            <ReadPost />\n          </Route>\n          <Unprotected path=\"/signin\">\n            <Signin />\n          </Unprotected>\n          <Unprotected path=\"/signup\">\n            <Signup />\n          </Unprotected>\n          <Protected path=\"/add\">\n            <AddPost />\n          </Protected>\n        </Switch>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const posts = (state = { posts: [], post: {} }, action) => {\n  switch (action.type) {\n    case \"GET_POST_SUCCESS\":\n      return {\n        ...state,\n        post: action.post,\n      };\n    case \"GET_POSTS_SUCCESS\":\n    case \"DELETE_POSTS_SUCCESS\":\n      return {\n        ...state,\n        posts: action.posts,\n        post: {},\n      };\n    case \"ADD_POST_SUCCESS\":\n      return {\n        ...state,\n        posts: [...state.posts, action.post],\n        post: {},\n      };\n    default: {\n      return { ...state };\n    }\n  }\n};\n\nexport default posts;\n","const users = (state = {}, action) => {\n  switch (action.type) {\n    case \"SIGNIN_SUCCESS\":\n    case \"SIGNUP_SUCCESS\":\n    case \"INIT_SUCCESS\":\n      return {\n        user: action.user\n      };\n    case \"INIT_FAILURE\":\n    case \"SIGNUP_FAILURE\":\n    case \"SIGNOUT_SUCCESS\":\n      return {};\n    default: {\n      return { ...state };\n    }\n  }\n};\n\nexport default users;\n","const errors = (state = { error: false }, action) => {\n  switch (action.type) {\n    case \"GET_POSTS_FAILURE\":\n    case \"GET_POST_FAILURE\":\n    case \"GET_CATEGORIES_FAILURE\":\n    case \"SIGNIN_FAILURE\":\n    case \"SIGNUP_FAILURE\":\n    case \"INIT_FAILURE\":\n    case \"ADD_POST_FAILURE\":\n    case \"DELETE_POST_FAILURE\":\n      return {\n        error: true,\n      };\n    case \"GET_POSTS_SUCCESS\":\n    case \"GET_CATEGORIES_SUCCESS\":\n    case \"SIGNIN_SUCCESS\":\n    case \"INIT_SUCCESS\":\n    case \"ADD_POST_SUCCESS\":\n    case \"DELETE_POST_SUCCESS\":\n    case \"RESET_ERROR\":\n      return { error: false };\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default errors;\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { combineReducers } from \"redux\";\nimport posts from \"./reducers/posts\";\nimport users from \"./reducers/users\";\nimport errors from \"./reducers/errors\";\n\nconst rootReducer = combineReducers({\n  posts,\n  users,\n  errors\n});\nexport default createStore(rootReducer, applyMiddleware(thunk));\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport store from \"./store\";\n// import server from \"./server\";\n\n// server({ tte: 20 }); // Set tte in mins to expire the persistence store\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}